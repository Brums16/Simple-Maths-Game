[{"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/index.js":"1","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/App.js":"2","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/reportWebVitals.js":"3","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Header.js":"4","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Footer.js":"5","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Main.js":"6"},{"size":535,"mtime":1691194622569,"results":"7","hashOfConfig":"8"},{"size":283,"mtime":1691279715337,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1691193658333,"results":"10","hashOfConfig":"8"},{"size":246,"mtime":1691320545035,"results":"11","hashOfConfig":"8"},{"size":251,"mtime":1691195000886,"results":"12","hashOfConfig":"8"},{"size":5967,"mtime":1696581706195,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l3cpps",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/index.js",[],[],"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/App.js",["34"],[],"import Header from './Header.js';\nimport Footer from './Footer.js'\nimport Main from './Main.js'\nimport React, {useState} from \"react\";\n\n\nconst App = () => {\n\n\n  return (\n    <div className=\"container\">\n    <Header />\n    <Main />\n    <Footer />\n    </div>\n)\n}\n\n\nexport default App\n\n\n","/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/reportWebVitals.js",[],[],"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Header.js",[],[],"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Footer.js",[],[],"/home/chrisb/Coding/Personal Projects/Maths-Games/Speed-Sums/src/Main.js",["35","36","37","38"],[],"import \"./Style.css\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport heart from \"./gameheart.png\";\n\nconst Main = () => {\n  const [operation, setOperation] = useState(\"\");\n  const [integer1, setInteger1] = useState(\"\");\n  const [integer2, setInteger2] = useState(\"\");\n  const [answer, setAnswer] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [time, setTime] = useState(60);\n  const intervalRef = useRef(null);\n  const [lives, setLives] = useState(3);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [correctInput, setCorrectInput] = useState(false);\n  const [incorrectInput, setIncorrectInput] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [equals, setEquals] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n\n  function randint() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  function randinteger1() {\n    let randinteger1 = randint();\n    setInteger1(randinteger1);\n    return randinteger1;\n  }\n\n  function randinteger2() {\n    let randinteger2 = randint();\n    setInteger2(randinteger2);\n    return randinteger2;\n  }\n\n  const handleChange = (event) => {\n    setUserAnswer(event.target.value);\n  };\n\n  const newGame = () => {\n    setGameStarted(true);\n    setTime(60);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    setLives(3);\n    setAnswer(null);\n    setUserAnswer(\"\");\n    setCorrectInput(false);\n    setIncorrectInput(false);\n    setScore(0);\n    setIsGameOver(false);\n    randomQuestion();\n    const userInputElement = document.getElementById(\"userAnswer\");\n    userInputElement.focus();\n    intervalRef.current = setInterval(reduceTime, 1000);\n  };\n\n  function randomQuestion() {\n    let operationChance = Math.floor(Math.random() * 4);\n\n    if (operationChance === 0) {\n      setOperation(\" + \");\n      setAnswer(randinteger1() + randinteger2());\n      setEquals(\" = \");\n    }\n    if (operationChance === 1) {\n      setOperation(\" - \");\n      setAnswer(randinteger1() - randinteger2());\n      setEquals(\" = \");\n    }\n    if (operationChance === 2) {\n      setOperation(\" x \");\n      setAnswer(randinteger1() * randinteger2());\n      setEquals(\" = \");\n    }\n    if (operationChance === 3) {\n      let dividend, divisor;\n      do {\n        dividend = randinteger1();\n        divisor = randinteger2();\n      } while (dividend % divisor !== 0);\n      setOperation(\" รท \");\n      setAnswer(dividend / divisor);\n      setEquals(\" = \");\n    }\n    console.log(answer);\n    return;\n  }\n\n  function checkAnswer(userAnswer, answer) {\n    if (userAnswer == \"\") {\n      return;\n    }\n    if (userAnswer == answer) {\n      setScore(score + 1);\n      setUserAnswer(\"\");\n      randomQuestion();\n      setCorrectInput(true);\n      setTimeout(() => {\n        setCorrectInput(false);\n      }, 500);\n    } else {\n      setLives(lives - 1);\n      setUserAnswer(\"\");\n      randomQuestion();\n      setIncorrectInput(true);\n      setTimeout(() => {\n        setIncorrectInput(false);\n      }, 500);\n    }\n  }\n\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n    }\n  }, [score]);\n  /*this next part is listening to see if lives or time falls to 0 */\n\n  useEffect(() => {\n    if (lives === 0 || time === 0) {\n      setIsGameOver(true);\n      clearInterval(intervalRef.current);\n    }\n  }, [lives, time]);\n\n  const gameOver = () => {\n    return (\n      <div className=\"gameOver\">\n        <h2\n          style={{\n            color: \"red\",\n          }}\n        >\n          GAME OVER\n        </h2>\n        <h2 className=\"scoreMessage\">Score: {score}</h2>\n\n        <h2>High Score: {highScore}</h2>\n\n        <button onClick={newGame} id=\"playAgain\">\n          Play again\n        </button>\n      </div>\n    );\n  };\n\n  const newGameButton = () => {\n    return (\n      <div>\n        <button onClick={newGame} id=\"newgame\">\n          New Game\n        </button>\n      </div>\n    );\n  };\n\n  const livesDisplay = () => {\n    const heartIcons = Array.from({ length: lives }, (_, index) => (\n      <img src={heart} key={index} className=\"heartIcon\" />\n    ));\n    return heartIcons;\n  };\n\n  const timerBar = () => {\n    const timerBarWidth = (time / 60) * 100 + \"%\";\n    return (\n      <div className=\"outerbox\">\n        <div\n          className=\"innerbox\"\n          style={{\n            width: timerBarWidth,\n            backgroundColor:\n              time > 30 ? \"green\" : time > 10 ? \"#DAA520\" : \"red\",\n          }}\n        ></div>\n      </div>\n    );\n  };\n\n  const reduceTime = () => {\n    setTime((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));\n  };\n\n  document.onkeydown = (event) => {\n    if (gameStarted) {\n      if (event.key === \"Enter\") {\n        checkAnswer(userAnswer, answer);\n        if (isGameOver) {\n          newGame();\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      {isGameOver && gameOver()}\n      {gameStarted === false && newGameButton()}\n      <div class=\"answer-div\">\n        <h2 className=\"question\">\n          {integer1}\n          {operation}\n          {integer2}\n          {equals}\n        </h2>\n        <input\n          type=\"text\"\n          id=\"userAnswer\"\n          name=\"userAnswer\"\n          onChange={handleChange}\n          value={userAnswer}\n          style={{\n            border: gameStarted ? \"2px solid black\" : \"none\",\n            borderRadius: \"2px\",\n          }}\n          className={\n            correctInput\n              ? \"correct-input\"\n              : incorrectInput\n              ? \"incorrect-input\"\n              : \"\"\n          }\n        />\n      </div>\n      <h3 className=\"score\">Score: {score}</h3>\n      <h3\n        style={{\n          color: time <= 5 ? \"red\" : \"\",\n        }}\n      >\n        Time remaining: {time}\n      </h3>\n      <div className=\"timerContainer\">{timerBar()}</div>\n      <div className=\"livesContainer\">{livesDisplay()}</div>\n    </div>\n  );\n};\n\nexport default Main;\n",{"ruleId":"39","severity":1,"message":"40","line":4,"column":16,"nodeType":"41","messageId":"42","endLine":4,"endColumn":24},{"ruleId":"43","severity":1,"message":"44","line":94,"column":20,"nodeType":"45","messageId":"46","endLine":94,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":97,"column":20,"nodeType":"45","messageId":"46","endLine":97,"endColumn":22},{"ruleId":"47","severity":1,"message":"48","line":120,"column":6,"nodeType":"49","endLine":120,"endColumn":13,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":163,"column":7,"nodeType":"53","endLine":163,"endColumn":60},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'highScore'. Either include it or remove the dependency array.","ArrayExpression",["54"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"55","fix":"56"},"Update the dependencies array to be: [highScore, score]",{"range":"57","text":"58"},[3184,3191],"[highScore, score]"]